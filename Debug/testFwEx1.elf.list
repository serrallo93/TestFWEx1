
testFwEx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init_array   00000004  080001f4  080001f4  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .fini_array   00000004  080001f8  080001f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000004  20000000  080001fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000002c  20000004  20000004  00010004  2**2
                  ALLOC
  5 ._user_heap_stack 00000200  20000030  20000030  00010004  2**0
                  ALLOC
  6 .ARM.attributes 00000032  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000310  00000000  00000000  00010036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000169  00000000  00000000  00010346  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000040  00000000  00000000  000104af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000001b4  00000000  00000000  000104ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ba  00000000  00000000  000106a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000082  00000000  00000000  0001095d  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000001ac  00000000  00000000  000109e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__do_global_dtors_aux>:
 8000000:	b510      	push	{r4, lr}
 8000002:	4c05      	ldr	r4, [pc, #20]	; (8000018 <__do_global_dtors_aux+0x18>)
 8000004:	7823      	ldrb	r3, [r4, #0]
 8000006:	b933      	cbnz	r3, 8000016 <__do_global_dtors_aux+0x16>
 8000008:	4b04      	ldr	r3, [pc, #16]	; (800001c <__do_global_dtors_aux+0x1c>)
 800000a:	b113      	cbz	r3, 8000012 <__do_global_dtors_aux+0x12>
 800000c:	4804      	ldr	r0, [pc, #16]	; (8000020 <__do_global_dtors_aux+0x20>)
 800000e:	f3af 8000 	nop.w
 8000012:	2301      	movs	r3, #1
 8000014:	7023      	strb	r3, [r4, #0]
 8000016:	bd10      	pop	{r4, pc}
 8000018:	20000004 	.word	0x20000004
 800001c:	00000000 	.word	0x00000000
 8000020:	080001d8 	.word	0x080001d8

08000024 <frame_dummy>:
 8000024:	b508      	push	{r3, lr}
 8000026:	4b03      	ldr	r3, [pc, #12]	; (8000034 <frame_dummy+0x10>)
 8000028:	b11b      	cbz	r3, 8000032 <frame_dummy+0xe>
 800002a:	4803      	ldr	r0, [pc, #12]	; (8000038 <frame_dummy+0x14>)
 800002c:	4903      	ldr	r1, [pc, #12]	; (800003c <frame_dummy+0x18>)
 800002e:	f3af 8000 	nop.w
 8000032:	bd08      	pop	{r3, pc}
 8000034:	00000000 	.word	0x00000000
 8000038:	080001d8 	.word	0x080001d8
 800003c:	20000008 	.word	0x20000008

08000040 <main>:
 * @brief   Embedded application start routine.
 * @param	None
 * @return  None
 ****************************************************************************/
int main()
{
 8000040:	b580      	push	{r7, lr}
 8000042:	b082      	sub	sp, #8
 8000044:	af00      	add	r7, sp, #0
	uint8_t command;
	robotTaskEnable = TRUE;
 8000046:	4b0d      	ldr	r3, [pc, #52]	; (800007c <main+0x3c>)
 8000048:	2201      	movs	r2, #1
 800004a:	701a      	strb	r2, [r3, #0]
	isSpiReady = TRUE;
 800004c:	4b0c      	ldr	r3, [pc, #48]	; (8000080 <main+0x40>)
 800004e:	2201      	movs	r2, #1
 8000050:	701a      	strb	r2, [r3, #0]

	/* Timer and SPI Initialization */
	TimerInit();
 8000052:	f000 f88d 	bl	8000170 <TimerInit>
	SPIInit();
 8000056:	f000 f899 	bl	800018c <SPIInit>
    while (TRUE)
    {
    	/* If the robotTask is Enable, we execute as fast as possible, so we
    	 * put in the infinite loop.
    	 */
    	if (robotTaskEnable == TRUE)
 800005a:	4b08      	ldr	r3, [pc, #32]	; (800007c <main+0x3c>)
 800005c:	781b      	ldrb	r3, [r3, #0]
 800005e:	2b01      	cmp	r3, #1
 8000060:	d10b      	bne.n	800007a <main+0x3a>
    	{
			if (getNextTaskFromEEPROM(&command) == RET_OK)
 8000062:	1dfb      	adds	r3, r7, #7
 8000064:	4618      	mov	r0, r3
 8000066:	f000 f835 	bl	80000d4 <getNextTaskFromEEPROM>
 800006a:	4603      	mov	r3, r0
 800006c:	2b00      	cmp	r3, #0
 800006e:	d104      	bne.n	800007a <main+0x3a>
			{
				RobotTask(command);
 8000070:	79fb      	ldrb	r3, [r7, #7]
 8000072:	4618      	mov	r0, r3
 8000074:	f000 f86c 	bl	8000150 <RobotTask>
			}
    	}
    }
 8000078:	e7ef      	b.n	800005a <main+0x1a>
 800007a:	e7ee      	b.n	800005a <main+0x1a>
 800007c:	20000020 	.word	0x20000020
 8000080:	2000002c 	.word	0x2000002c

08000084 <TimerISR>:
*          way, but we don't know how RobotTask is implemented, so its supposed
*          that is polling mode and the only way to execute another functionality
*          is in an interrupt.
******************************************************************************/
void TimerISR(void)
{
 8000084:	b580      	push	{r7, lr}
 8000086:	af00      	add	r7, sp, #0
	if (robotTaskEnable == TRUE && checkSensorDetected())
 8000088:	4b07      	ldr	r3, [pc, #28]	; (80000a8 <TimerISR+0x24>)
 800008a:	781b      	ldrb	r3, [r3, #0]
 800008c:	2b01      	cmp	r3, #1
 800008e:	d109      	bne.n	80000a4 <TimerISR+0x20>
 8000090:	f000 f83e 	bl	8000110 <checkSensorDetected>
 8000094:	4603      	mov	r3, r0
 8000096:	2b00      	cmp	r3, #0
 8000098:	d004      	beq.n	80000a4 <TimerISR+0x20>
	{
		RobotStop();
 800009a:	f000 f863 	bl	8000164 <RobotStop>
		robotTaskEnable = FALSE;
 800009e:	4b02      	ldr	r3, [pc, #8]	; (80000a8 <TimerISR+0x24>)
 80000a0:	2200      	movs	r2, #0
 80000a2:	701a      	strb	r2, [r3, #0]
	}
}
 80000a4:	bd80      	pop	{r7, pc}
 80000a6:	bf00      	nop
 80000a8:	20000020 	.word	0x20000020

080000ac <callSensorTask>:
* @brief   Check if the sensor detects presence, in affirmative case Stops
*          the Robot and disable the robotTask.
*
******************************************************************************/
void callSensorTask(void)
{
 80000ac:	b580      	push	{r7, lr}
 80000ae:	af00      	add	r7, sp, #0
	if (checkSensorDetected() == TRUE && robotTaskEnable == TRUE)
 80000b0:	f000 f82e 	bl	8000110 <checkSensorDetected>
 80000b4:	4603      	mov	r3, r0
 80000b6:	2b01      	cmp	r3, #1
 80000b8:	d108      	bne.n	80000cc <callSensorTask+0x20>
 80000ba:	4b05      	ldr	r3, [pc, #20]	; (80000d0 <callSensorTask+0x24>)
 80000bc:	781b      	ldrb	r3, [r3, #0]
 80000be:	2b01      	cmp	r3, #1
 80000c0:	d104      	bne.n	80000cc <callSensorTask+0x20>
	{
		RobotStop();
 80000c2:	f000 f84f 	bl	8000164 <RobotStop>
		robotTaskEnable = FALSE;
 80000c6:	4b02      	ldr	r3, [pc, #8]	; (80000d0 <callSensorTask+0x24>)
 80000c8:	2200      	movs	r2, #0
 80000ca:	701a      	strb	r2, [r3, #0]
	}
}
 80000cc:	bd80      	pop	{r7, pc}
 80000ce:	bf00      	nop
 80000d0:	20000020 	.word	0x20000020

080000d4 <getNextTaskFromEEPROM>:
*
* @return  Command
*
******************************************************************************/
static tError getNextTaskFromEEPROM( uint8_t* command )
{
 80000d4:	b580      	push	{r7, lr}
 80000d6:	b084      	sub	sp, #16
 80000d8:	af00      	add	r7, sp, #0
 80000da:	6078      	str	r0, [r7, #4]
	tError ret;

	if (isSpiReady == TRUE)
 80000dc:	4b0b      	ldr	r3, [pc, #44]	; (800010c <getNextTaskFromEEPROM+0x38>)
 80000de:	781b      	ldrb	r3, [r3, #0]
 80000e0:	2b01      	cmp	r3, #1
 80000e2:	d10c      	bne.n	80000fe <getNextTaskFromEEPROM+0x2a>
	{
		SPIEepromEnable();
 80000e4:	f000 f858 	bl	8000198 <SPIEepromEnable>
		*command = SPIRead();
 80000e8:	f000 f86e 	bl	80001c8 <SPIRead>
 80000ec:	4603      	mov	r3, r0
 80000ee:	461a      	mov	r2, r3
 80000f0:	687b      	ldr	r3, [r7, #4]
 80000f2:	701a      	strb	r2, [r3, #0]
		SPIEepromDisable();
 80000f4:	f000 f856 	bl	80001a4 <SPIEepromDisable>
		ret = RET_OK;
 80000f8:	2300      	movs	r3, #0
 80000fa:	73fb      	strb	r3, [r7, #15]
 80000fc:	e001      	b.n	8000102 <getNextTaskFromEEPROM+0x2e>
	}
	else
	{
		ret = RET_BUSY;
 80000fe:	2302      	movs	r3, #2
 8000100:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000102:	7bfb      	ldrb	r3, [r7, #15]
}
 8000104:	4618      	mov	r0, r3
 8000106:	3710      	adds	r7, #16
 8000108:	46bd      	mov	sp, r7
 800010a:	bd80      	pop	{r7, pc}
 800010c:	2000002c 	.word	0x2000002c

08000110 <checkSensorDetected>:
*
* @return  TRUE or FALSE
*
******************************************************************************/
static tBool checkSensorDetected( void )
{
 8000110:	b580      	push	{r7, lr}
 8000112:	b082      	sub	sp, #8
 8000114:	af00      	add	r7, sp, #0
	tBool detection = FALSE;
 8000116:	2300      	movs	r3, #0
 8000118:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	if (isSpiReady == FALSE)
 800011a:	4b0c      	ldr	r3, [pc, #48]	; (800014c <checkSensorDetected+0x3c>)
 800011c:	781b      	ldrb	r3, [r3, #0]
 800011e:	2b00      	cmp	r3, #0
 8000120:	d101      	bne.n	8000126 <checkSensorDetected+0x16>
	{
		SPIEepromDisable();
 8000122:	f000 f83f 	bl	80001a4 <SPIEepromDisable>
	}

	SPISensorEnable();
 8000126:	f000 f843 	bl	80001b0 <SPISensorEnable>
	val = SPIRead();
 800012a:	f000 f84d 	bl	80001c8 <SPIRead>
 800012e:	4603      	mov	r3, r0
 8000130:	71bb      	strb	r3, [r7, #6]
	SPISensorDisable();
 8000132:	f000 f843 	bl	80001bc <SPISensorDisable>

	if (val > 128)
 8000136:	79bb      	ldrb	r3, [r7, #6]
 8000138:	2b80      	cmp	r3, #128	; 0x80
 800013a:	d901      	bls.n	8000140 <checkSensorDetected+0x30>
	{
		detection = TRUE;
 800013c:	2301      	movs	r3, #1
 800013e:	71fb      	strb	r3, [r7, #7]
	}

	return detection;
 8000140:	79fb      	ldrb	r3, [r7, #7]
}
 8000142:	4618      	mov	r0, r3
 8000144:	3708      	adds	r7, #8
 8000146:	46bd      	mov	sp, r7
 8000148:	bd80      	pop	{r7, pc}
 800014a:	bf00      	nop
 800014c:	2000002c 	.word	0x2000002c

08000150 <RobotTask>:
typedef unsigned short uint16_t;
typedef unsigned long uint32_t;
typedef float float32_t;

void RobotTask(uint8_t u8Command)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]

}
 800015a:	370c      	adds	r7, #12
 800015c:	46bd      	mov	sp, r7
 800015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000162:	4770      	bx	lr

08000164 <RobotStop>:

void RobotStop (void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0

}
 8000168:	46bd      	mov	sp, r7
 800016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800016e:	4770      	bx	lr

08000170 <TimerInit>:

void TimerInit(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	46bd      	mov	sp, r7
 8000176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800017a:	4770      	bx	lr

0800017c <TimetGetus>:


uint32_t TimetGetus(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	return 1;
 8000180:	2301      	movs	r3, #1
}
 8000182:	4618      	mov	r0, r3
 8000184:	46bd      	mov	sp, r7
 8000186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800018a:	4770      	bx	lr

0800018c <SPIInit>:


void SPIInit(void)
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0

}
 8000190:	46bd      	mov	sp, r7
 8000192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000196:	4770      	bx	lr

08000198 <SPIEepromEnable>:

void SPIEepromEnable(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0

}
 800019c:	46bd      	mov	sp, r7
 800019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001a2:	4770      	bx	lr

080001a4 <SPIEepromDisable>:

void SPIEepromDisable(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0

}
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr

080001b0 <SPISensorEnable>:

void SPISensorEnable(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0

}
 80001b4:	46bd      	mov	sp, r7
 80001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ba:	4770      	bx	lr

080001bc <SPISensorDisable>:

void SPISensorDisable(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0

}
 80001c0:	46bd      	mov	sp, r7
 80001c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c6:	4770      	bx	lr

080001c8 <SPIRead>:

uint8_t SPIRead(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	return 1;
 80001cc:	2301      	movs	r3, #1
}
 80001ce:	4618      	mov	r0, r3
 80001d0:	46bd      	mov	sp, r7
 80001d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d6:	4770      	bx	lr

080001d8 <__EH_FRAME_BEGIN__>:
 80001d8:	0000 0000                                   ....

080001dc <_init>:
 80001dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001de:	bf00      	nop
 80001e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001e2:	bc08      	pop	{r3}
 80001e4:	469e      	mov	lr, r3
 80001e6:	4770      	bx	lr

080001e8 <_fini>:
 80001e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ea:	bf00      	nop
 80001ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001ee:	bc08      	pop	{r3}
 80001f0:	469e      	mov	lr, r3
 80001f2:	4770      	bx	lr
